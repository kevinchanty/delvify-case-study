{"version":3,"sources":["components/Topbar.tsx","context/ListContext.tsx","pages/HomePage.tsx","pages/ListPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TopBar","Navbar","bg","expand","Container","Brand","as","Link","to","Toggle","aria-controls","Collapse","id","Nav","className","ListContext","createContext","status","HomePage","setListContextState","loadLists","navigate","useNavigate","listContext","useContext","useState","show","name","addState","setAddState","target","deleteState","setDeleteState","handleClose","addSubmit","useCallback","a","body","headers","Headers","append","fetch","method","JSON","stringify","res","console","error","json","deleteSubmit","listId","Button","variant","size","onClick","ListGroup","numbered","value","map","list","Item","action","Modal","onHide","Header","closeButton","Title","Body","FormControl","onChange","e","aria-describedby","Footer","sampleData","list_id","description","deadline","Date","isSelected","is_completed","is_deleted","created_at","updated_at","ListPage","useParams","taskList","setTaskList","loadStatus","setLoadStatus","showAdd","setShowAdd","now","editState","setEditState","deelteTargetName","reduce","prev","task","includes","push","moveState","setMoveState","moveTargetName","isMultiSelected","some","multiTarget","loadTaskList","log","result","editSubmit","toogleCompleted","isCompleted","moveSubmit","useEffect","find","parseInt","filter","index","Form","Check","type","checked","prevTaskList","newState","handleSelected","Badge","pill","toDateString","toLocaleTimeString","Label","selected","showTimeSelect","dateFormat","join","Select","newListId","App","listContextState","lists","Provider","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.efec5758.chunk.js","sourcesContent":["import  { ReactElement } from 'react'\nimport { Container, Nav, Navbar } from 'react-bootstrap'\nimport { Link, Outlet } from 'react-router-dom'\n\n\nexport default function TopBar(): ReactElement {\n    return (\n        <>\n        <Navbar bg=\"light\" expand=\"lg\">\n            <Container>\n                <Navbar.Brand as={Link} to=\"/\">Simple Task App</Navbar.Brand>\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n\n                <Navbar.Collapse id=\"basic-navbar-nav\">\n                    <Nav className=\"me-auto\">\n                        <Nav.Link as={Link} to=\"/\">Home</Nav.Link>\n                    </Nav>\n                </Navbar.Collapse>\n            </Container>\n        </Navbar>\n        <Container>\n            <Outlet/>\n        </Container>\n        </>\n    )\n}\n","import { createContext } from \"react\";\n\nexport type ListContextState =\n    { status: \"LOADING\" | \"ERROR\" } |\n    { status: \"LOADED\", value: ListValue[] }\n\nexport type ListValue = {\n    id: number,\n    user_id: number,\n    name: string,\n    is_deleted: boolean,\n    created_at: string,\n    updated_at: string,\n}\n\nexport const ListContext = createContext<ListContextState>({ status: \"LOADING\" });\n","import { ReactElement, useCallback, useContext, useState } from 'react'\nimport { Button, FormControl, ListGroup, Modal } from 'react-bootstrap'\nimport { useNavigate } from 'react-router-dom';\nimport { IoCloseOutline } from \"react-icons/io5\";\nimport { ListContext, ListContextState } from '../context/ListContext';\n\ninterface Props {\n    setListContextState: (state: ListContextState) => void\n    loadLists: ()=> void\n}\n\nexport default function HomePage({ setListContextState, loadLists }: Props): ReactElement {\n    const navigate = useNavigate();\n\n    const listContext = useContext(ListContext)\n    const [addState, setAddState] = useState({ show: false, name: \"\" });\n    const [deleteState, setDeleteState] = useState({ show: false, target: 0 , name: \"\"});\n    const handleClose = () => setAddState({ show: false, name: \"\" });\n    const handleShow = () => setAddState({ show: true, name: \"\" });\n\n    const addSubmit = useCallback(async () => {\n        const body = {\n            name: addState.name,\n        }\n        let headers: Headers = new Headers();\n        headers.append(\"Content-Type\", \"application/json\");\n        let res: Response;\n        try {\n            res = await fetch(`http://localhost:3100/lists`, {\n                headers,\n                method: \"POST\",\n                body: JSON.stringify(body)\n            });\n        } catch (error) {\n            console.error(`Failed to POST:`, error);\n            return\n        }\n        let json;\n        try {\n            json = await res.json();\n        } catch (error) {\n            console.error(`Failed decode json, POST:`, error);\n            return\n        }\n        if (json.error) {\n            console.error(`Failed to POST API:`, json.error);\n        }\n        setAddState({ show: false, name: \"\" });\n        loadLists();\n    },[loadLists,setAddState,addState],)\n\n    const deleteSubmit = useCallback(async () => {\n        const body = {\n            listId: deleteState.target\n        }\n        let headers: Headers = new Headers();\n        headers.append(\"Content-Type\", \"application/json\");\n        let res: Response;\n        try {\n            res = await fetch(`http://localhost:3100/lists`, {\n                headers,\n                method: \"DELETE\",\n                body: JSON.stringify(body)\n            });\n        } catch (error) {\n            console.error(`Failed to POST:`, error);\n            return\n        }\n        let json;\n        try {\n            json = await res.json();\n        } catch (error) {\n            console.error(`Failed decode json, POST:`, error);\n            return\n        }\n        if (json.error) {\n            console.error(`Failed to POST API:`, json.error);\n        }\n        setDeleteState({ show: false, target: 0 , name: \"\"});\n        loadLists();\n    },[loadLists,setDeleteState,deleteState],)\n\n    return (\n        <>\n            {/* Top Bar */}\n            <div className=\"d-flex justify-content-between\">\n                <h2>\n                    My List\n                </h2>\n                <Button variant=\"primary\" size=\"sm\" onClick={handleShow}>Add List</Button>\n            </div>\n\n            {/* List */}\n            <ListGroup as=\"ol\" numbered>\n                {listContext.status === \"LOADED\"\n                    ?\n                    listContext.value.map(list => (<ListGroup.Item\n                        key={list.id}\n                        as=\"li\"\n                        className=\"d-flex justify-content-between align-items-start\"\n                        action\n                    >\n                        <div className=\"ms-2 me-auto flex-fill\" onClick={() => navigate(`/list/${list.id}`)}>\n                            <div className=\"fw-bold\">{list.name}</div>\n                        </div>\n                        <div className=\"fs-3\" onClick={() => setDeleteState({ show: true, target: list.id , name: list.name})}>\n                            <IoCloseOutline />\n                        </div>\n                    </ListGroup.Item>))\n                    : <div>Loading...</div>\n                }\n            </ListGroup>\n\n            {/* Add Modal */}\n            <Modal show={addState.show} onHide={handleClose}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Enter a Name:</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <FormControl value={addState.name} onChange={e => setAddState({ show: true, name: e.target.value })} aria-describedby=\"basic-addon3\" />\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={handleClose}>\n                        Close\n                    </Button>\n                    <Button variant=\"primary\" onClick={addSubmit}>\n                        Add\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n\n            {/* Delete Modal */}\n            <Modal show={deleteState.show} onHide={()=> setDeleteState({ show: false, target: 0 , name: \"\"})}>\n                <Modal.Header closeButton>\n                    <Modal.Title>{`Confirm to Delete ${deleteState.name} ?`}</Modal.Title>\n                </Modal.Header>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={() => setDeleteState({ show: false, target: 0 , name: \"\"})}>\n                        Close\n                    </Button>\n                    <Button variant=\"danger\" onClick={deleteSubmit}>\n                        Delete\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </>\n    )\n}\n","import { ReactElement, useCallback, useContext, useEffect, useState } from 'react'\nimport { Badge, Button, Form, FormControl, ListGroup, Modal } from 'react-bootstrap'\nimport { IoAdd, IoTrashOutline, IoArrowUndoOutline, IoCreateOutline, IoCheckmarkOutline, IoCloseOutline } from \"react-icons/io5\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { useParams } from 'react-router';\nimport { ListContext, ListValue } from '../context/ListContext';\n\nexport type Task = {\n    id: number,\n    list_id: number,\n    name: string,\n    description: string,\n    deadline: Date,\n    is_completed: boolean,\n    is_deleted: boolean,\n    created_at: string,\n    updated_at: string,\n    isSelected: boolean\n}\n\nconst sampleData = [\n    {\n        id: 1,\n        list_id: 1,\n        name: \"Task 1\",\n        description: \"sample description 1\",\n        deadline: new Date(),\n        isSelected: false,\n        is_completed: false,\n        is_deleted: false,\n        created_at: \"2021-11-15T03:46:30.423Z\",\n        updated_at: \"2021-11-15T03:46:30.423Z\",\n    },\n\n]\n\nexport default function ListPage(): ReactElement {\n    const { listId } = useParams()\n    const listContext = useContext(ListContext)\n\n    const [taskList, setTaskList] = useState<Task[]>(sampleData);\n    const [loadStatus, setLoadStatus] = useState<\"LOADING\" | \"ERROR\" | \"LOADED\">(\"LOADING\");\n\n    const [showAdd, setShowAdd] = useState(false);\n    const [addState, setAddState] = useState({ name: \"\", description: \"\", deadline: new Date(Date.now() + 3600000) });\n\n    const [editState, setEditState] = useState({ show: false, name: \"\", description: \"\", deadline: new Date(), target: 0 });\n\n    const [deleteState, setDeleteState] = useState({ show: false, target: [] as number[] });\n    const deelteTargetName = taskList!.reduce<string[]>(\n        (prev, task) => {\n            if (deleteState.target.includes(task.id)) {\n                prev.push(task.name)\n            }\n            return prev\n        }, [])\n    const [moveState, setMoveState] = useState({ show: false, target: [] as number[], listId: 0 });\n    const moveTargetName = taskList!.reduce<string[]>(\n        (prev, task) => {\n            if (moveState.target.includes(task.id)) {\n                prev.push(task.name)\n            }\n            return prev\n        }, [])\n\n    function handleSelected(index: number, checked: boolean) {\n        setTaskList(prevTaskList => {\n            let newState = [...prevTaskList]\n            newState[index].isSelected = checked\n            return newState\n        })\n    }\n    const isMultiSelected = taskList!.some(task => task.isSelected)\n    const multiTarget = taskList!.reduce<number[]>(\n        (prev, task) => {\n            if (task.isSelected) {\n                prev.push(task.id)\n            }\n            return prev\n        }, [])\n\n    const loadTaskList = useCallback(async () => {\n        const res = await fetch(`http://localhost:3100/tasks/${listId}`);\n        const json = await res.json();\n\n        if (json.error) {\n            console.log(json.error);\n            setLoadStatus(\"ERROR\")\n            return\n        };\n\n        const result = json.map((task: Task) => ({\n            ...task,\n            deadline: new Date(task.deadline),\n            isSelected:false,\n        }))\n\n        setLoadStatus(\"LOADED\");\n\n        setTaskList(result);\n\n    }, [setTaskList, listId])\n\n    const addSubmit = useCallback(async () => {\n        const body = {\n            listId: listId,\n            name: addState.name,\n            description: addState.description,\n            deadline: addState.deadline,\n        }\n        let headers: Headers = new Headers();\n        headers.append(\"Content-Type\", \"application/json\");\n        let res: Response;\n        try {\n            res = await fetch(`http://localhost:3100/tasks`, {\n                headers,\n                method: \"POST\",\n                body: JSON.stringify(body)\n            });\n        } catch (error) {\n            console.error(`Failed to POST:`, error);\n            return\n        }\n        let json;\n        try {\n            json = await res.json();\n        } catch (error) {\n            console.error(`Failed decode json, POST:`, error);\n            return\n        }\n        if (json.error) {\n            console.error(`Failed to POST API:`, json.error);\n        }\n        setShowAdd(false);\n        setAddState({ name: \"\", description: \"\", deadline: new Date(Date.now() + 3600000) });\n        loadTaskList();\n    }, [setShowAdd, setAddState, loadTaskList, listId, addState])\n\n    const editSubmit = useCallback(async () => {\n        const body = {\n            id: editState.target,\n            name: editState.name,\n            description: editState.description,\n            deadline: editState.deadline,\n        }\n        let headers: Headers = new Headers();\n        headers.append(\"Content-Type\", \"application/json\");\n        let res: Response;\n        try {\n            res = await fetch(`http://localhost:3100/tasks`, {\n                headers,\n                method: \"PUT\",\n                body: JSON.stringify(body)\n            });\n        } catch (error) {\n            console.error(`Failed to POST:`, error);\n            return\n        }\n        let json;\n        try {\n            json = await res.json();\n        } catch (error) {\n            console.error(`Failed decode json, POST:`, error);\n            return\n        }\n        if (json.error) {\n            console.error(`Failed to POST API:`, json.error);\n        }\n        setEditState({ show: false, name: \"\", description: \"\", deadline: new Date(), target: 0 });\n        loadTaskList();\n    }, [setEditState, loadTaskList, editState])\n\n    const toogleCompleted = useCallback(async (id: number, isCompleted: boolean) => {\n        const body = {\n            id,\n            isCompleted,\n        }\n        let headers: Headers = new Headers();\n        headers.append(\"Content-Type\", \"application/json\");\n        let res: Response;\n        try {\n            res = await fetch(`http://localhost:3100/tasksStatus`, {\n                headers,\n                method: \"PUT\",\n                body: JSON.stringify(body)\n            });\n        } catch (error) {\n            console.error(`Failed to POST:`, error);\n            return\n        }\n        let json;\n        try {\n            json = await res.json();\n        } catch (error) {\n            console.error(`Failed decode json, POST:`, error);\n            return\n        }\n        if (json.error) {\n            console.error(`Failed to POST API:`, json.error);\n        }\n        loadTaskList();\n    }, [loadTaskList])\n\n    const deleteSubmit = useCallback(async () => {\n        const body = {\n            id: deleteState.target,\n        }\n        let headers: Headers = new Headers();\n        headers.append(\"Content-Type\", \"application/json\");\n        let res: Response;\n        try {\n            res = await fetch(`http://localhost:3100/tasks`, {\n                headers,\n                method: \"DELETE\",\n                body: JSON.stringify(body)\n            });\n        } catch (error) {\n            console.error(`Failed to POST:`, error);\n            return\n        }\n        let json;\n        try {\n            json = await res.json();\n        } catch (error) {\n            console.error(`Failed decode json, POST:`, error);\n            return\n        }\n        if (json.error) {\n            console.error(`Failed to POST API:`, json.error);\n        }\n        setDeleteState({ show: false, target: [] });\n        loadTaskList();\n    }, [setDeleteState, loadTaskList, deleteState])\n\n\n    const moveSubmit = useCallback(async () => {\n        const body = {\n            id: moveState.target,\n            listId: moveState.listId\n        }\n        let headers: Headers = new Headers();\n        headers.append(\"Content-Type\", \"application/json\");\n        let res: Response;\n        try {\n            res = await fetch(`http://localhost:3100/tasksList`, {\n                headers,\n                method: \"PUT\",\n                body: JSON.stringify(body)\n            });\n        } catch (error) {\n            console.error(`Failed to POST:`, error);\n            return\n        }\n        let json;\n        try {\n            json = await res.json();\n        } catch (error) {\n            console.error(`Failed decode json, POST:`, error);\n            return\n        }\n        if (json.error) {\n            console.error(`Failed to POST API:`, json.error);\n        }\n        setMoveState({ show: false, target: [] as number[], listId: 0 });\n        loadTaskList();\n    }, [setMoveState, loadTaskList, moveState])\n\n    useEffect(() => {\n        loadTaskList()\n    }, [loadTaskList])\n\n    return (\n        <>\n            {/* Top Bar */}\n            <div className=\"d-flex justify-content-between\">\n                <h2>{listContext.status === \"LOADED\" ? listContext.value.find(list => list.id === parseInt(listId!))?.name : \"Loading...\"}</h2>\n                <div className=\"d-flex\">\n                    {isMultiSelected\n                        // Multi-Select Icons\n                        ? (<>\n                            <div onClick={() => setMoveState({\n                                show: true,\n                                target: multiTarget,\n                                listId: (listContext as any as { value: ListValue[] }).value.filter(list => list.id !== parseInt(listId!))[0].id,\n                            }\n                            )} className=\"fs-3\">\n                                <IoArrowUndoOutline />\n                            </div>\n                            <div onClick={() => setDeleteState({ show: true, target: multiTarget })} className=\"fs-3\">\n                                <IoTrashOutline />\n                            </div>\n                        </>)\n                        : (<div onClick={() => setShowAdd(true)} className=\"fs-3\">\n                            <IoAdd />\n                        </div>)\n                    }\n                </div>\n            </div>\n\n            {/*  Task List */}\n            {loadStatus === \"LOADED\"\n                ? (<ListGroup as=\"ol\">\n                    {taskList.map((task, index) => (\n                        <ListGroup.Item\n                            key={task.id}\n                            as=\"li\"\n                            className=\"d-flex justify-content-between align-items-start\"\n                        // action onClick={alertClicked}\n                        >\n                            <Form.Check\n                                as=\"input\"\n                                type=\"checkbox\"\n                                id={`default-checkbox`}\n                                checked={task.isSelected}\n                                onChange={() => handleSelected(index, !task.isSelected)}\n                            />\n                            <div className=\"ms-2 me-auto\">\n                                <div className=\"d-flex\">\n                                    <div className=\"fw-bold me-2\">{task.name}</div>\n                                    <Badge bg=\"primary\" className=\"me-2\" pill >\n                                        {task.deadline.toDateString() + \" \" + task.deadline.toLocaleTimeString()}\n                                    </Badge>\n                                    {task.is_completed\n                                        ? <Badge bg=\"success\" className=\"me-2\" pill >\n                                            Completed\n                                        </Badge>\n                                        : null}\n                                </div>\n                                <div>\n                                    {task.description}\n                                </div>\n                            </div>\n                            {/* Task Icons */}\n                            <div className=\"fs-3 d-flex\">\n                                <div onClick={() => toogleCompleted(task.id, !task.is_completed)}>\n                                    {task.is_completed\n                                        ? <IoCloseOutline />\n                                        : <IoCheckmarkOutline />}\n                                </div>\n                                <div onClick={() => setEditState({ show: true, name: task.name, description: task.description, deadline: new Date(task.deadline), target: task.id })}>\n                                    <IoCreateOutline />\n                                </div>\n                                <div onClick={() => setMoveState({\n                                    show: true,\n                                    target: [task.id],\n                                    listId: (listContext as any as { value: ListValue[] }).value.filter(list => list.id !== parseInt(listId!))[0].id,\n                                })}>\n                                    <IoArrowUndoOutline />\n                                </div>\n                                <div onClick={() => setDeleteState({ show: true, target: [task.id] })}>\n                                    <IoTrashOutline />\n                                </div>\n                            </div>\n                        </ListGroup.Item>\n                    ))\n                    }\n                </ListGroup>)\n                : <div>Loading...</div>\n            }\n\n            {/* Add Modal */}\n            <Modal show={showAdd} onHide={() => setShowAdd(false)}>\n                <Modal.Header closeButton>\n                    <Modal.Title>New Task</Modal.Title>\n                </Modal.Header>\n\n                <Modal.Body>\n                    <Form.Label>\n                        Name:\n                    </Form.Label>\n                    <FormControl aria-describedby=\"basic-addon3\" value={addState.name} onChange={e => setAddState(prev => ({ ...prev, name: e.target.value, }))} />\n                    <Form.Label>\n                        Description\n                    </Form.Label>\n                    <FormControl aria-describedby=\"basic-addon3\" value={addState.description} onChange={e => setAddState(prev => ({ ...prev, description: e.target.value, }))} />\n                    <Form.Label>\n                        Deadline:\n                    </Form.Label>\n                    <DatePicker\n                        onChange={(value: Date) => setAddState(prev => (\n                            {\n                                ...prev,\n                                deadline: value\n                            }\n                        )\n                        )}\n                        selected={addState.deadline}\n                        showTimeSelect\n                        dateFormat=\"Pp\"\n                    />\n\n                </Modal.Body>\n\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={() => setShowAdd(false)}>\n                        Close\n                    </Button>\n                    <Button variant=\"primary\" onClick={() => addSubmit()}>\n                        Add\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n\n            {/* Edit Modal */}\n            <Modal show={editState.show} onHide={() => setEditState({ show: false, name: \"\", description: \"\", deadline: new Date(), target: 0 })}>\n                <Modal.Header closeButton>\n                    <Modal.Title>{`Edit ${editState.name}`}</Modal.Title>\n                </Modal.Header>\n\n                <Modal.Body>\n                    <Form.Label>\n                        Name:\n                    </Form.Label>\n                    <FormControl aria-describedby=\"basic-addon3\" value={editState.name} onChange={e => setEditState(prev => ({ ...prev, name: e.target.value, }))} />\n                    <Form.Label>\n                        Description\n                    </Form.Label>\n                    <FormControl aria-describedby=\"basic-addon3\" value={editState.description} onChange={e => setEditState(prev => ({ ...prev, description: e.target.value, }))} />\n                    <Form.Label>\n                        Deadline:\n                    </Form.Label>\n                    <DatePicker\n                        onChange={(value: Date) => setEditState(prev => (\n                            {\n                                ...prev,\n                                deadline: value\n                            }\n                        )\n                        )}\n                        selected={editState.deadline}\n                        showTimeSelect\n                        dateFormat=\"Pp\"\n                    />\n                </Modal.Body>\n\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={() => setEditState({ show: false, name: \"\", description: \"\", deadline: new Date(), target: 0 })}>\n                        Close\n                    </Button>\n                    <Button variant=\"primary\" onClick={() => editSubmit()}>\n                        Edit\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n\n            {/* Delete Modal */}\n            <Modal show={deleteState.show} onHide={() => setDeleteState({ show: false, target: [] })}>\n                <Modal.Header closeButton>\n                    <Modal.Title>{`Confirm to Delete ${deelteTargetName.join(\", \")} ?`}</Modal.Title>\n                </Modal.Header>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={() => setDeleteState({ show: false, target: [] })}>\n                        Close\n                    </Button>\n                    <Button variant=\"danger\" onClick={() => deleteSubmit()}>\n                        Delete\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n\n            {/* Move Modal */}\n            <Modal show={moveState.show} onHide={() => setMoveState({ show: false, target: [], listId: 0 })}>\n                <Modal.Header closeButton>\n                    <Modal.Title>{`Move ${moveTargetName.join(\", \")}`}</Modal.Title>\n                </Modal.Header>\n\n                <Modal.Body>\n                    <Form.Label>\n                        Destination:\n                    </Form.Label>\n                    <Form.Select value={moveState.listId} onChange={e => {\n                        const newListId = parseInt(e.target.value)\n\n                        setMoveState(prev => ({ ...prev, listId: newListId }))\n\n                    }}>\n                        {listContext.status === \"LOADED\" ?\n                            listContext.value.filter(list => list.id !== parseInt(listId!)).map(list =>\n                                <option key={list.id} value={list.id}>{list.name}</option>)\n                            : \"\"}\n                    </Form.Select>\n                </Modal.Body>\n\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={() => setMoveState({ show: false, target: [], listId: 0 })}>\n                        Close\n                    </Button>\n                    <Button variant=\"primary\" onClick={() => moveSubmit()}>\n                        Move\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </>\n    )\n}\n","import { useCallback, useEffect, useState } from \"react\";\nimport {\n  BrowserRouter as Router,\n  Routes,\n  Route,\n} from \"react-router-dom\";\nimport TopBar from \"./components/Topbar\";\nimport HomePage from \"./pages/HomePage\";\nimport ListPage from \"./pages/ListPage\";\nimport './App.scss';\nimport { ListContext, ListContextState } from \"./context/ListContext\";\n\nexport default function App() {\n  const [listContextState, setListContextState] = useState<ListContextState>({ status: \"LOADING\" });\n\n  const loadLists = useCallback(async () => {\n    const res = await fetch(\"http://localhost:3100/lists\");\n    const lists = await res.json();\n\n    if (lists.error) {\n      console.log(\"error\");\n      return\n    };\n\n    setListContextState({ status: \"LOADED\", value: lists });\n  }, [setListContextState])\n\n  useEffect(() => {\n    loadLists();\n  }, [loadLists])\n\n  return (\n    <Router>\n      <ListContext.Provider value={listContextState}>\n          <Routes>\n            <Route path=\"/\" element={<TopBar />} >\n              <Route index element={<HomePage setListContextState={setListContextState} loadLists={loadLists} />} />\n              <Route path=\"list/:listId\" element={<ListPage />} />\n\n              {/* Using path=\"*\"\" means \"match anything\", so this route\n                acts like a catch-all for URLs that we don't have explicit\n              routes for. */}\n              {/* <Route path=\"*\" element={<NoMatch />} /> */}\n            </Route>\n          </Routes>\n      </ListContext.Provider>\n    </Router >\n  );\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}